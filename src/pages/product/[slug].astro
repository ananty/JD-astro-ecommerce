---
// src/pages/product/[slug].astro (最终生产版)
import Layout from '../../layouts/Layout.astro';
import { productsData, getRandomProducts, type Product as ProductType } from '../../data/products';
import ProductCardHome from '../../components/ProductCardHome.astro';

export async function getStaticPaths() {
  return productsData.map(product => ({
    params: { slug: product.slug },
    props: { product }
  }));
}

const product: ProductType | undefined = Astro.props.product;

if (!product) {
  return new Response(null, { status: 404, statusText: 'Not Found' });
}

const { name, category, longDescription, skus, galleryImages, slug } = product;
const defaultSku = skus && skus.length > 0 ? skus[0] : null;
const mainImage = galleryImages && galleryImages.length > 0 ? galleryImages[0] : null;

if (!defaultSku) { throw new Error(`Product with slug "${slug}" has no SKUs.`); }
if (!mainImage) { throw new Error(`Product with slug "${slug}" has no galleryImages.`); }

const relatedProducts = getRandomProducts(3, slug);
---
<Layout title={name} description={product.shortDescription}>
  <div class="container mx-auto px-4 sm:px-6 lg:px-8 py-12 md:py-16">
    <div class="grid md:grid-cols-2 gap-8 lg:gap-12 items-start">
      
      <!-- ==================== Image Gallery Section ==================== -->
      <div id="image-gallery" class="md:sticky md:top-24">
        <div>
          <div class="aspect-[4/3] mb-4 rounded-lg overflow-hidden shadow-xl bg-gray-100 dark:bg-gray-800">
            <img id="main-product-image" src={mainImage.src} alt={mainImage.alt} class="w-full h-full object-cover" loading="eager" width="800" height="600"/>
          </div>
          {galleryImages.length > 1 && (
            <div id="thumbnail-container" class="grid grid-cols-4 sm:grid-cols-5 gap-2 md:gap-3">
              {galleryImages.map((image, index) => (
                <button 
                  class:list={[
                    "thumbnail-button block aspect-square rounded-md overflow-hidden border-2 transition-all duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2",
                    index === 0 ? "border-primary-500" : "border-transparent hover:border-primary-300"
                  ]}
                  data-large-src={image.src} data-large-alt={image.alt} aria-label={`View image ${index + 1}`}
                >
                  <img src={image.src} alt={`Thumbnail of ${image.alt}`} class="w-full h-full object-cover" loading="lazy" width="150" height="150"/>
                </button>
              ))}
            </div>
          )}
        </div>
      </div>

      <!-- ==================== Product Details & Purchase Section ==================== -->
      <div>
        {category && <p class="text-sm text-primary-600 dark:text-primary-400 font-semibold mb-2 uppercase tracking-wider">{category}</p>}
        <h1 class="text-3xl lg:text-4xl font-bold text-gray-900 dark:text-white mb-4">{name}</h1>
        
        <div id="product-options" class="mb-6">
          <h3 class="text-md font-semibold text-gray-700 dark:text-gray-300 mb-3">Select Plan:</h3>
          <div class="space-y-3" id="sku-radios-container">
            {skus.map((sku, index) => (
              <label class:list={["flex items-center justify-between p-4 border rounded-lg cursor-pointer transition-all duration-200 ease-in-out", "hover:border-primary-500 dark:hover:border-primary-400", index === 0 ? "border-primary-500 ring-2 ring-primary-500" : "border-gray-300 dark:border-gray-600", "bg-white dark:bg-gray-800/50 has-[:checked]:bg-primary-50 dark:has-[:checked]:bg-primary-500/10 has-[:checked]:border-primary-500 dark:has-[:checked]:border-primary-400"]}>
                <div class="flex items-center">
                  <input 
                    type="radio" 
                    name="selected_sku" 
                    value={sku.id} 
                    class="form-radio h-5 w-5 text-primary-600 border-gray-400 focus:ring-primary-500 focus:ring-offset-0" 
                    checked={index === 0} 
                    aria-describedby={`sku-price-${sku.id}`}
                    data-sku-data={JSON.stringify(sku)}
                  />
                  <span class="ml-3 text-sm font-medium text-gray-800 dark:text-gray-200">{sku.duration}</span>
                </div>
                <span id={`sku-price-${sku.id}`} class="text-sm font-semibold text-gray-900 dark:text-white">{sku.currencySymbol}{sku.price.toFixed(2)}</span>
              </label>
            ))}
          </div>
        </div>
        
        <div class="mb-8 text-right">
          <p class="text-2xl lg:text-3xl font-bold text-gray-900 dark:text-white">Total: <span id="selected-plan-price" class="text-primary-600 dark:text-primary-400">{defaultSku.currencySymbol}{defaultSku.price.toFixed(2)}</span></p>
        </div>

        <div id="stripe-checkout-button-container">
          <button type="button" id="checkout-button-placeholder" data-price-id={defaultSku.stripePriceId || defaultSku.id} data-product-slug={slug} class="w-full btn-base bg-green-600 hover:bg-green-700 text-white font-bold py-3.5 px-6 rounded-lg text-lg shadow-md hover:shadow-lg flex items-center justify-center">
            <i class="fas fa-credit-card mr-2"></i> Proceed to Checkout
          </button>
          <p class="text-xs text-gray-500 dark:text-gray-400 mt-2 text-center">Secure payment via Stripe.</p>
        </div>
      </div>
    </div>

    <div class="mt-16 md:mt-20 pt-10 border-t border-gray-200 dark:border-gray-700">
    <!-- ==================== Feature Highlights Bar (Final, Minimalist Version) ==================== -->
<div class="not-prose my-3">
  <div class="flex items-center justify-around text-center p-2">
    
    <!-- Feature 1: Secure -->
    <div class="flex flex-col sm:flex-row items-center gap-1 sm:gap-2">
      <i class="fas fa-shield-alt text-lg text-green-500"></i>
      <span class="text-xs sm:text-sm font-medium text-gray-800 dark:text-gray-200">Secure</span>
    </div>
    
    <!-- Feature 2: Convenient -->
    <div class="flex flex-col sm:flex-row items-center gap-1 sm:gap-2">
      <i class="fas fa-rocket text-lg text-blue-500"></i>
      <span class="text-xs sm:text-sm font-medium text-gray-800 dark:text-gray-200">Convenient</span>
    </div>

    <!-- Feature 3: Affordable -->
    <div class="flex flex-col sm:flex-row items-center gap-1 sm:gap-2">
      <i class="fas fa-tags text-lg text-orange-500"></i>
      <span class="text-xs sm:text-sm font-medium text-gray-800 dark:text-gray-200">Affordable</span>
    </div>

    <!-- Feature 4: Support -->
    <div class="flex flex-col sm:flex-row items-center gap-1 sm:gap-2">
      <i class="fas fa-headset text-lg text-purple-500"></i>
      <span class="text-xs sm:text-sm font-medium text-gray-800 dark:text-gray-200">Support</span>
    </div>

  </div>
</div>
<!-- ============================================================================================== -->
      <article class="prose dark:prose-invert max-w-none lg:prose-lg text-gray-700 dark:text-gray-300 mx-auto">
        <div set:html={longDescription} />
      </article>
    </div>

    {relatedProducts.length > 0 && (
      <div class="mt-16 md:mt-20 pt-10 border-t border-gray-200 dark:border-gray-700">
        <h2 class="text-2xl md:text-3xl font-semibold text-center text-gray-900 dark:text-white mb-8 md:mb-10">You Might Also Like</h2>
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8">
          {relatedProducts.map(related => <ProductCardHome product={related} loading="lazy"/>)}
        </div>
      </div>
    )}
  </div>
</Layout>

<!-- ==================== 页面所有客户端脚本 ==================== -->
<script>
  document.addEventListener('DOMContentLoaded', () => {

    // --- 图片库脚本 ---
    const mainImageEl = document.getElementById('main-product-image');
    const thumbnailContainer = document.getElementById('thumbnail-container');

    if (mainImageEl && thumbnailContainer) {
      thumbnailContainer.addEventListener('click', (event) => {
        const targetButton = event.target.closest('.thumbnail-button');
        if (!targetButton) return;

        const newSrc = targetButton.dataset.largeSrc;
        if (newSrc && mainImageEl.src && !mainImageEl.src.endsWith(newSrc)) {
          mainImageEl.classList.add('image-fade-out');

          setTimeout(() => {
            mainImageEl.src = newSrc;
            mainImageEl.alt = targetButton.dataset.largeAlt;
            mainImageEl.classList.remove('image-fade-out');
          }, 150);
        }

        const thumbnailButtons = thumbnailContainer.querySelectorAll('.thumbnail-button');
        thumbnailButtons.forEach(btn => btn.classList.replace('border-primary-500', 'border-transparent'));
        targetButton.classList.replace('border-transparent', 'border-primary-500');
      });
    }

    // --- SKU 选择和 Stripe 购买脚本 ---
    const stripe = Stripe('pk_test_51RUOTAJuY2t8VoKm9iHEXtgskQWJ29a9apDOL7ahKjeKNqqdQ1bsnJrOS0bUtdnSFdE9UdBhKG9D8eYU6kprFlbS00V5ndcXEr'); // <-- 确保这里是你真实的测试公钥

    const skuRadiosContainer = document.getElementById('sku-radios-container');
    const selectedPlanPriceEl = document.getElementById('selected-plan-price');
    const checkoutButton = document.getElementById('checkout-button-placeholder');

    if (skuRadiosContainer && selectedPlanPriceEl) {
      skuRadiosContainer.addEventListener('change', (event) => {
        const target = event.target;
        if (target.name === 'selected_sku' && target.checked) {
          const parentLabel = target.closest('label');
          const priceTextEl = parentLabel.querySelector('[id^="sku-price-"]');
          if (priceTextEl) {
            selectedPlanPriceEl.textContent = priceTextEl.textContent;
          }
          const skuData = JSON.parse(target.dataset.skuData || '{}');
          if (checkoutButton && (skuData.stripePriceId || skuData.id)) {
            checkoutButton.setAttribute('data-price-id', skuData.stripePriceId || skuData.id);
          }
        }
      });
    }

    if (checkoutButton) {
      checkoutButton.addEventListener('click', async () => {
        const priceId = checkoutButton.getAttribute('data-price-id');
        const productSlug = checkoutButton.getAttribute('data-product-slug'); // 从按钮获取slug

        if (!priceId || priceId.includes('YOUR_STRIPE_PRICE_ID_HERE')) {
          alert('Error: Stripe Price ID not configured for this plan.');
          return;
        }
        
        checkoutButton.textContent = 'Processing...';
        checkoutButton.disabled = true;

        try {
          const response = await fetch('/api/create-checkout-session', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
              priceId: priceId,
              productSlug: productSlug,
              successUrl: `${window.location.origin}/success`,
              cancelUrl: window.location.href,
            }),
          });
          const { sessionId, error } = await response.json();
          if (error) { throw new Error(error); }

          const { error: stripeError } = await stripe.redirectToCheckout({ sessionId: sessionId });
          if (stripeError) { throw stripeError; }
        } catch (error) {
          console.error("Checkout failed:", error);
          alert(`Could not proceed to checkout. Please try again or contact support.`);
          checkoutButton.textContent = 'Proceed to Checkout';
          checkoutButton.disabled = false;
        }
      });
    }
  });
</script>

<style>
  #main-product-image {
    transition: opacity 0.3s ease-in-out;
  }
  .image-fade-out {
    opacity: 0;
  }
</style>