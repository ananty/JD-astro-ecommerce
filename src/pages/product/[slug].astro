---
// src/pages/product/[slug].astro
import Layout from '../../layouts/Layout.astro'; // 基础布局
import { productsData, getProductBySlug, getRandomProducts } from '../../data/products'; // 产品数据和辅助函数
import ProductCardHome from '../../components/ProductCardHome.astro'; // 复用首页产品卡片作为"相关产品"

// getStaticPaths 用于在构建时为每个产品生成一个静态页面
export async function getStaticPaths() {
  return productsData.map(product => ({
    params: { slug: product.slug }, // URL参数，对应文件名中的[slug]
    props: { product } // 传递给页面的props，这样我们就不需要在下面再次查找产品
  }));
}

// 从Astro的props中获取当前产品对象 (由getStaticPaths传递)
const { product } = Astro.props;

// 如果由于某种原因 (例如，直接访问了一个无效的slug的URL，虽然getStaticPaths应该阻止这种情况) 找不到产品
// 但在开发模式下，如果getStaticPaths没有完全覆盖所有情况，这里可以做个保护
if (!product) {
  // 在实际应用中，你可能想返回一个404状态码
  // return new Response(null, { status: 404, statusText: 'Not Found' });
  // 或者重定向到404页面
  return Astro.redirect('/404'); // 假设你有一个 /404.astro 页面
}

// 获取3个相关产品 (不包括当前产品)
const relatedProducts = getRandomProducts(3, product.slug);
const pageTitle = `${product.name} - ${product.category}`; // 更详细的页面标题
const pageDescription = product.shortDescription; // 使用产品简短描述作为页面meta描述
---
<Layout title={pageTitle} description={pageDescription}>
  <div class="container mx-auto px-4 sm:px-6 lg:px-8 py-12 md:py-16">
    <div class="grid md:grid-cols-2 gap-8 lg:gap-12 items-start">
      <!-- 左侧：产品图片 -->
      <div class="aspect-[4/3] md:aspect-square rounded-xl shadow-xl overflow-hidden bg-gray-100 dark:bg-gray-800 fade-in-section">
        <img 
          src={product.heroImageUrl || product.imageUrl || '/images/placeholders/product_hero_default.png'} 
          alt={`Image of ${product.name}`} 
          class="w-full h-full object-contain md:object-cover transition-transform duration-300 ease-in-out hover:scale-105"
          loading="eager" {/* 主图优先加载 */}
          width="600" height="600"
        />
      </div>

      <!-- 右侧：产品信息、SKU选择、购买 -->
      <div class="sticky top-24  fade-in-section" style="animation-delay: 100ms;"> {/*  md:sticky md:top-24 使其在桌面端滚动时部分固定 */}
        <nav aria-label="Breadcrumb" class="mb-3 text-sm text-gray-500 dark:text-gray-400">
          <ol class="list-none p-0 inline-flex space-x-2">
            <li><a href="/" class="hover:text-primary-600">Home</a></li>
            <li><span>/</span></li>
            {/* <li><a href="/products" class="hover:text-primary-600">Products</a></li> (如果有一个产品列表页) */}
            {/* <li><span>/</span></li> */}
            <li aria-current="page">{product.name}</li>
          </ol>
        </nav>

        <h1 class="text-3xl lg:text-4xl font-bold tracking-tight text-gray-900 dark:text-white mb-2">{product.name}</h1>
        <p class="text-md text-gray-500 dark:text-gray-400 mb-4">{product.category}</p>
        <p class="text-lg text-gray-700 dark:text-gray-300 mb-6">{product.shortDescription}</p>

        {/* SKU 选择表单 */}
        <form id="product-purchase-form">
          {product.skus.length > 1 && (
            <div class="mb-6">
              <h3 class="text-md font-semibold text-gray-800 dark:text-gray-200 mb-2">Select Plan:</h3>
              <div class="space-y-3" id="sku-options-container">
                {product.skus.map((sku, index) => (
                  <label 
                    class:list={[
                      "flex items-center justify-between p-4 border rounded-lg cursor-pointer transition-all duration-200 ease-in-out",
                      "hover:border-primary-500 dark:hover:border-primary-400",
                      "has-[:checked]:border-primary-600 has-[:checked]:ring-2 has-[:checked]:ring-primary-500 has-[:checked]:bg-primary-50 dark:has-[:checked]:bg-gray-700/50 dark:has-[:checked]:border-primary-500"
                    ]}
                    data-sku-id={sku.id}
                  >
                    <div class="flex items-center">
                      <input 
                        type="radio" 
                        name="selected_sku" 
                        value={sku.id} 
                        id={`sku-${sku.id}`}
                        class="form-radio h-4 w-4 text-primary-600 border-gray-300 focus:ring-primary-500 dark:bg-gray-700 dark:border-gray-600"
                        checked={index === 0} {/* 默认选中第一个 */}
                        aria-describedby={`sku-desc-${sku.id}`}
                      />
                      <span id={`sku-desc-${sku.id}`} class="ml-3 text-sm font-medium text-gray-800 dark:text-gray-200">
                        {sku.duration}
                      </span>
                    </div>
                    <span class="text-sm font-semibold text-gray-900 dark:text-white">
                      {sku.currencySymbol}{sku.price.toFixed(2)}
                    </span>
                  </label>
                ))}
              </div>
            </div>
          )}
          
          {/* 价格显示 (如果只有一个SKU或者用于动态更新) */}
          <div class="mb-6 text-3xl font-bold text-gray-900 dark:text-white">
            <span id="dynamic-price-display">
              {product.skus[0].currencySymbol}{product.skus[0].price.toFixed(2)}
            </span>
            <span class="text-sm font-normal text-gray-500 dark:text-gray-400 ml-1">
              / {product.skus[0].duration.toLowerCase()}
            </span>
          </div>

          {/* Stripe 购买按钮占位符 / 集成点 */}
          <div id="stripe-checkout-button-container" class="mb-6">
            {/* 
              这里将是 Stripe Checkout Button 的集成点。
              Stripe 通常会提供一段 JavaScript 代码来创建一个按钮并处理点击事件。
              或者，如果你使用的是 Stripe Payment Links，这里可以是一个简单的链接按钮。

              简单占位按钮:
            */}
            <button 
              type="submit" 
              id="checkout-button"
              class="w-full btn-base bg-primary-600 hover:bg-primary-700 dark:bg-primary-500 dark:hover:bg-primary-600 text-white font-bold py-3 px-6 rounded-lg text-lg shadow-md hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-opacity-50"
            >
              Proceed to Checkout <i class="fas fa-credit-card ml-2"></i>
            </button>
            <p class="text-xs text-center mt-2 text-gray-500 dark:text-gray-400">Secure payment via Stripe</p>
          </div>
          
          {/* (可选) 产品特性列表 */}
          {product.features && product.features.length > 0 && (
            <div class="mt-6 pt-4 border-t border-gray-200 dark:border-gray-700">
              <h4 class="text-sm font-medium text-gray-900 dark:text-white mb-2">Key Features:</h4>
              <ul class="list-disc list-inside space-y-1 text-sm text-gray-600 dark:text-gray-400">
                {product.features.map(feature => (
                  <li>{feature}</li>
                ))}
              </ul>
            </div>
          )}
        </form>
      </div>
    </div>

    {/* 下方：产品详细描述 */}
    <div class="mt-16 md:mt-20 pt-10 border-t border-gray-200 dark:border-gray-700 fade-in-section" style="animation-delay: 200ms;">
      <h2 class="text-2xl md:text-3xl font-semibold text-gray-900 dark:text-white mb-6">Product Description</h2>
      <div class="prose dark:prose-invert max-w-none text-gray-700 dark:text-gray-300 leading-relaxed">
        {/* 
          这里填充 product.longDescription。 
          如果 longDescription 包含 Markdown，你需要一个 Markdown 解析器。
          对于简单的文本或 HTML，可以直接输出。
          Astro 默认不解析变量中的 Markdown，除非使用特定指令或组件。
          为了简单起见，我们假设它是纯文本或预先处理好的 HTML。
        */}
        <p>{product.longDescription || "Detailed product description will be available soon."}</p>
        {/* 如果 longDescription 是 HTML: <div set:html={product.longDescription} /> */}
      </div>
    </div>

    {/* "Customers also purchased" (相关产品) 区域 */}
    {relatedProducts.length > 0 && (
      <section class="mt-16 md:mt-20 pt-10 border-t border-gray-200 dark:border-gray-700 fade-in-section" style="animation-delay: 300ms;">
        <h2 class="text-2xl md:text-3xl font-semibold text-center text-gray-900 dark:text-white mb-10">
          You Might Also Like
        </h2>
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8">
          {relatedProducts.map(relatedProd => (
            <ProductCardHome product={relatedProd} loading="lazy" /> // 复用首页的产品卡片组件
          ))}
        </div>
      </section>
    )}
  </div>
</Layout>

<script define:vars={{ skus: product.skus }}> // 将SKUs数据传递给客户端脚本
  // 产品页面客户端交互脚本
  const form = document.getElementById('product-purchase-form') as HTMLFormElement;
  const skuOptionsContainer = document.getElementById('sku-options-container');
  const dynamicPriceDisplay = document.getElementById('dynamic-price-display');
  const checkoutButtonContainer = document.getElementById('stripe-checkout-button-container');
  const placeholderCheckoutButton = document.getElementById('checkout-button');

  // skus 变量已由 define:vars 注入
  // const productSkus = skus; 

  function updatePrice(selectedSkuId) {
    const selectedSku = skus.find(s => s.id === selectedSkuId);
    if (selectedSku && dynamicPriceDisplay) {
      dynamicPriceDisplay.innerHTML = `
        ${selectedSku.currencySymbol}${selectedSku.price.toFixed(2)}
        <span class="text-sm font-normal text-gray-500 dark:text-gray-400 ml-1">
          / ${selectedSku.duration.toLowerCase()}
        </span>
      `;
      // TODO: 更新Stripe按钮的价格ID或金额 (如果Stripe按钮是动态生成的)
      console.log("Selected SKU for Stripe:", selectedSku.id, "Price:", selectedSku.price);
    }
  }

  if (skus.length > 1 && skuOptionsContainer) {
    skuOptionsContainer.addEventListener('change', (event) => {
      const target = event.target as HTMLInputElement;
      if (target.name === 'selected_sku' && target.checked) {
        updatePrice(target.value);
      }
    });
  } else if (skus.length === 1 && dynamicPriceDisplay) {
    // 如果只有一个SKU，确保价格显示正确 (虽然HTML中已设置，但JS可以作为二次确认)
    updatePrice(skus[0].id);
  }


  // --- Stripe Checkout Button Integration Placeholder ---
  // 在这里，你需要集成Stripe的逻辑。
  // 这通常涉及到:
  // 1. 你的Stripe可发布密钥 (Publishable Key)。
  // 2. 当用户选择一个SKU时，获取该SKU对应的Stripe Price ID (或者直接使用金额，取决于你的集成方式)。
  // 3. 初始化Stripe.js并创建一个Checkout会话或挂载一个Stripe按钮。

  if (placeholderCheckoutButton) {
    placeholderCheckoutButton.addEventListener('click', (event) => {
      event.preventDefault(); // 阻止表单的默认提交行为
      
      let selectedSkuId;
      if (skus.length > 1) {
        const selectedRadio = form.querySelector('input[name="selected_sku"]:checked') as HTMLInputElement;
        selectedSkuId = selectedRadio ? selectedRadio.value : null;
      } else {
        selectedSkuId = skus[0].id;
      }

      if (!selectedSkuId) {
        alert('Please select a plan.');
        return;
      }
      
      const selectedSkuData = skus.find(s => s.id === selectedSkuId);

      alert(`Placeholder: Proceeding to checkout with ${selectedSkuData.duration} (${selectedSkuData.currencySymbol}${selectedSkuData.price.toFixed(2)}). \nReplace this with your Stripe integration. SKU ID: ${selectedSkuId}`);
      
      // 示例: 如果使用Stripe Payment Link
      // const paymentLink = getPaymentLinkForSku(selectedSkuId); // 你需要实现这个函数
      // if (paymentLink) window.location.href = paymentLink;

      // 示例: 如果使用Stripe Checkout (客户端创建会话)
      // 需要你的Stripe Publishable Key 和一个后端端点来创建 Checkout Session
      // stripe.redirectToCheckout({ sessionId: 'YOUR_SESSION_ID_FROM_BACKEND' });
    });
  }

  // 淡入动画 (如果需要，但通常产品页内容是立即加载的)
  document.addEventListener('DOMContentLoaded', () => {
    const sections = document.querySelectorAll('.fade-in-section');
    sections.forEach(section => {
        (section as HTMLElement).style.opacity = '1';
        (section as HTMLElement).style.transform = 'translateY(0)';
        // 如果仍想用 IntersectionObserver，请复制首页的 observer 逻辑
    });
  });

</script>
<style>
  /* 为选中的SKU标签添加更明显的样式 (Tailwind的has:伪类可能需要特定配置或插件) */
  /* 以下为备用/补充样式，如果 has:[:checked] 不完全符合预期 */
  label:has(input[type="radio"]:checked) {
    /* Tailwind的 has:[:checked]:border-primary-600 应该能工作，
       但如果不行，可以考虑用JS动态添加一个 'is-selected' 类，然后在这里定义 .is-selected 的样式 */
  }
</style>
